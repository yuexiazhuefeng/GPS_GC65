#ifndef _ddi_Norflash_h
#define _ddi_Norflash_h

#include <includes.h> 


//SPI CS PA4
#define MAIN_SPI_FLASH  		  1		  
//SPI CS PB0
#define SUBORDINATION_SPI_FLASH   2


/*
FLASH status Information
*/
typedef enum _FLASH_ST
{
	FLASH_STATUS_ERROR_SIZE = 0x80,
	FLASH_STATUS_ERROR_PAGE,
	FLASH_STATUS_ERROR_VID,
	FLASH_STATUS_ERROR_PID,
	FLASH_STATUS_ERROR_HTTAG,
	FLASH_STATUS_SUCCESS

}FlashStatus_e;
/*
Flash information
*/
typedef	struct _FLASH_INFO
{
	//Manufacturer ID
	u32 m_u32VID;
	//Device ID
	u32 m_u32PID;
	
	u32 m_u32TotalSize;  
	u32 m_u32BlockSize; //64K
	u32 m_u32PageSize;   
	u32 m_u32BlockNumber;
	u32 m_u32PageNumber;
	FlashStatus_e m_FlashSt;
	u8 channel; //在电路板上有两组flash，cs pin分别为PA4, PB0
	volatile u8 *p_u8FlashLock;
}FlashInfo_t;



//平衡区标志
typedef struct _GIMBALS_FLAG
{
	u32 flag; //平衡区的名字
	u32 cnt; //当前有效的子域序号
	u32 cs; //check sum
}GimbalsFlag_t;

typedef struct _NF_GIMBALS
{
	GimbalsFlag_t GimFlag;
	s32 SA;   //起始地址  需要在块的开始位置，比如 0x1000 0x12000
	s32 Size; //平衡区总大小   0x1000的整数倍
	s32 FieldLen; //平衡区子域数据长度（GimbalsFlag_t长度＋DATA的长度）	必须能被0x1000整除
	u32 Mini;
	u32 Max;
	s32 MiniAddr;
	s32 MaxAddr;
	s32 st;  //状态
	u8 *pData;
}Gimbals_t;

#if 0
typedef struct _mdd_norflash
{
	s32 i32GimbalsFieldTotal[2];  //平衡区总大小
	FlashInfo_t ExNorFlash;
}mdd_nf_t;

typedef struct _nf_temp
{
	s32 flag;
	s32 counter;
}nf_temp;
#endif

/*********************************************************************
说明:初始化
输入:pInf为 flash的句柄  ,high为TRUE SPI是 高频，FALSE的频率为TRUE时的1/8
输出:
0:	成功
-1:	失败
**********************************************************************/
s32 TKH25_Ini(FlashInfo_t *pInf);
/*********************************************************************
说明:扇区擦除
输入	:pInf:device handle
		:SectorNumber: Current Sector number
输出:
0:	成功
-1:	失败
**********************************************************************/
s32 TKH25_SectorErase(FlashInfo_t *pInf,u32 SectorNumber);

/*********************************************************************
说明	:flash 写数据
输入	:pInf:device handle
		:addr: 地址
		:len:数据长度
		:pbuf:数据缓冲指针
输出	:
0:	成功
-1:	失败
**********************************************************************/
s32 TKH25_Write(FlashInfo_t *pInf,u32 addr,u32 len,u8* pbuf);
/*********************************************************************
说明	:flash 读数据
输入	:pInf:device handle
		:addr: 地址
		:len:数据长度
		:pbuf:数据缓冲指针
输出	:
0:	成功
-1:	失败
**********************************************************************/
s32 TKH25_Read(FlashInfo_t *pInf,u32 addr,u32 len,u8* pbuf);
/*********************************************************************
说明:蕊片擦除
输入:pInf:device handle
输出:
0:	成功
-1:	失败
**********************************************************************/
s32 TKH25_EraseChip(FlashInfo_t *pInf);


/**********************************************************************
//说明	:初始化NOR FLASH
//参数	:无
//返回	:
			0	:成功
			-1	:失败
**********************************************************************/
s32 mdd_EXF_Ini(FlashInfo_t *pInf);
/**********************************************************************
//说明	:获取NOR FLASH 厂商ID
//参数	:无
//返回	:16 进制厂商ID
**********************************************************************/
s32 mdd_EXF_GetVid(FlashInfo_t *pInf);
/**********************************************************************
//说明	:获取NOR FLASH 产品ID
//参数	:无
//返回	:16进制产品ID
**********************************************************************/	
s32 mdd_EXF_GetPid(FlashInfo_t *pInf);
/**********************************************************************
//说明	:获取NOR FLASH 总容量
//参数	:无
//返回	:总容量(byte)
**********************************************************************/	
u32 mdd_EXF_TotalSize(FlashInfo_t *pInf);
/**********************************************************************
//说明	:擦除扇区
//参数1	:
			扇区地址
//返回	:
			0	:成功
			-1	:失败
**********************************************************************/	
s32 mdd_EXF_SectorErase(FlashInfo_t *pInf,u32 addr);
/**********************************************************************
//说明	:写页寻址区
//参数1	:页寻址直接地址
//参数2	:数据长度
//参数2	:数据指针
//返回	:
			0	:成功
			-1	:失败
**********************************************************************/	

s32 mdd_EXF_Write(FlashInfo_t *pInf,u32 addr,u32 len,u8* pbuf);

/**********************************************************************
//说明	:读页寻址区
//参数1	:页寻址直接地址
//参数2	:写数据长度
//参数2	:数据指针
//返回	:
			0	:成功
			-1	:失败
**********************************************************************/	
s32 mdd_EXF_Read(FlashInfo_t *pInf,u32 addr,u32 len,u8* pbuf);
/**********************************************************************
//说明	:初始化平衡区
//参数	:平衡区数据结构
//返回	:
			0	:成功
			-1	:失败
			-2	:平衡区大小定义错误
			-3	:平衡区字段大小错误
			-4	:数据区错误,建议格式化数据区
			-5	:记录为空
**********************************************************************/
s32 mdd_EXF_GimbalsInit(FlashInfo_t *pInf,Gimbals_t *pGim);
/**********************************************************************
//说明	:格式化平衡区
//参数	:平衡区数据结构
//返回	:
			0	:成功
			-1	:失败
**********************************************************************/
s32 mdd_EXF_GimbalsFormat(FlashInfo_t *pInf,Gimbals_t *pGim);

/**********************************************************************
//说明	:平衡区数据保存
//参数	:平衡区数据结构
//返回	:
			0	:成功
			-1	:失败
			-2	:平衡区末初始化
**********************************************************************/
s32 mdd_EXF_GimbalsWrite(FlashInfo_t *pInf,Gimbals_t *pGim);
/**********************************************************************
//说明	:读平衡区数据
//参数1	:平衡区数据结构
//参数2	:平衡区数据段号
//返回	:
			0	:成功
			-1	:失败
			-2	:平衡区末准备好
			-3	:参数错误
			-4	:校验出错
**********************************************************************/
s32 mdd_EXF_GimbalsRead(FlashInfo_t *pInf,Gimbals_t *pGim,u32 FieldID);
#endif

