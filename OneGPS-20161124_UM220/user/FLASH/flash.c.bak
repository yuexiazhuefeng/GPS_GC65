#include "flash.h" 
#include "spi.h"
#include "led.h"   
#include "stm32f10x.h"

//SPI CS PA4
#ifndef    MAIN_SPI_FLASH
#define MAIN_SPI_FLASH  		  1
		  
//SPI CS PB0
#define SUBORDINATION_SPI_FLASH   2
#endif


#define BITBAND(addr, bitnum) ((addr & 0xF0000000)+0x2000000+((addr &0xFFFFF)<<5)+(bitnum<<2)) 
#define MEM_ADDR(addr)  *((volatile unsigned long  *)(addr)) 
#define BIT_ADDR(addr, bitnum)   MEM_ADDR(BITBAND(addr, bitnum)) 
//IO口地址映射
#define GPIOA_ODR_Addr    (GPIOA_BASE+12) //0x4001080C 
#define GPIOB_ODR_Addr    (GPIOB_BASE+12) //0x40010C0C 
#define GPIOC_ODR_Addr    (GPIOC_BASE+12) //0x4001100C 
#define GPIOD_ODR_Addr    (GPIOD_BASE+12) //0x4001140C 
#define GPIOE_ODR_Addr    (GPIOE_BASE+12) //0x4001180C 
#define GPIOF_ODR_Addr    (GPIOF_BASE+12) //0x40011A0C    
#define GPIOG_ODR_Addr    (GPIOG_BASE+12) //0x40011E0C    

#define GPIOA_IDR_Addr    (GPIOA_BASE+8) //0x40010808 
#define GPIOB_IDR_Addr    (GPIOB_BASE+8) //0x40010C08 
#define GPIOC_IDR_Addr    (GPIOC_BASE+8) //0x40011008 
#define GPIOD_IDR_Addr    (GPIOD_BASE+8) //0x40011408 
#define GPIOE_IDR_Addr    (GPIOE_BASE+8) //0x40011808 
#define GPIOF_IDR_Addr    (GPIOF_BASE+8) //0x40011A08 
#define GPIOG_IDR_Addr    (GPIOG_BASE+8) //0x40011E08 
 
//IO口操作,只对单一的IO口!
//确保n的值小于16!
#define PAout(n)   BIT_ADDR(GPIOA_ODR_Addr,n)  //输出 
#define PAin(n)    BIT_ADDR(GPIOA_IDR_Addr,n)  //输入 

#define PBout(n)   BIT_ADDR(GPIOB_ODR_Addr,n)  //输出 
#define PBin(n)    BIT_ADDR(GPIOB_IDR_Addr,n)  //输入 

#define PCout(n)   BIT_ADDR(GPIOC_ODR_Addr,n)  //输出 
#define PCin(n)    BIT_ADDR(GPIOC_IDR_Addr,n)  //输入 

#define PDout(n)   BIT_ADDR(GPIOD_ODR_Addr,n)  //输出 
#define PDin(n)    BIT_ADDR(GPIOD_IDR_Addr,n)  //输入 

#define PEout(n)   BIT_ADDR(GPIOE_ODR_Addr,n)  //输出 
#define PEin(n)    BIT_ADDR(GPIOE_IDR_Addr,n)  //输入

#define PFout(n)   BIT_ADDR(GPIOF_ODR_Addr,n)  //输出 
#define PFin(n)    BIT_ADDR(GPIOF_IDR_Addr,n)  //输入

#define PGout(n)   BIT_ADDR(GPIOG_ODR_Addr,n)  //输出 
#define PGin(n)    BIT_ADDR(GPIOG_IDR_Addr,n)  //输入

#define	SPI_FLASH_CS PAout(4)  //选中FLASH	

#define	SUBORDINATION_SPI_FLASH_CS PBout(0)  //选中FLASH SUBORDINATION	

//Kbytes为一个Sector
//16个扇区为1个Block
//w25x32
//容量为4M字节,共有64个Block,512个Sector 

//初始化SPI FLASH的IO口
void SPI_Flash_Init(FlashInfo_t *pInf)
{  		
	GPIO_InitTypeDef GPIO_InitStructure;
	if (MAIN_SPI_FLASH == pInf->channel)
	{
		RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOA, ENABLE );	

		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
		//GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
		
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;  //SPI CS
	 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  //复用推挽输出
	 	GPIO_Init(GPIOA, &GPIO_InitStructure);
	 	SPI_FLASH_CS=1; 
	//	GPIO_ResetBits(GPIOA,GPIO_Pin_4);

	}
	else if (SUBORDINATION_SPI_FLASH == pInf->channel)
	{
		RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOB, ENABLE );	
		
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;  //SPI CS
	 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  //复用推挽输出
	 	GPIO_Init(GPIOB, &GPIO_InitStructure);
	 	SUBORDINATION_SPI_FLASH_CS = 1;
    }
	else
	  return;
	SPIx_Init();		   //初始化SPI
}  

//读取SPI_FLASH的状态寄存器
//BIT7  6   5   4   3   2   1   0
//SPR   RV  TB BP2 BP1 BP0 WEL BUSY
//SPR:默认0,状态寄存器保护位,配合WP使用
//TB,BP2,BP1,BP0:FLASH区域写保护设置
//WEL:写使能锁定
//BUSY:忙标记位(1,忙;0,空闲)
//默认:0x00
u8 SPI_Flash_ReadSR(FlashInfo_t *pInf)   
{  
	u8 byte=0;   
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=0;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 0;
	else return 0;



	                          //使能器件   
	SPIx_ReadWriteByte(W25X_ReadStatusReg);    //发送读取状态寄存器命令    
	byte=SPIx_ReadWriteByte(0Xff);             //读取一个字节 
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=1;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 1; 
//	SPI_FLASH_CS=1;                            //取消片选     
	return byte;   
} 
//写SPI_FLASH状态寄存器
//只有SPR,TB,BP2,BP1,BP0(bit 7,5,4,3,2)可以写!!!
void SPI_FLASH_Write_SR(FlashInfo_t *pInf,u8 sr)   
{   
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=0;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 0;
	else return;                           //使能器件   
	SPIx_ReadWriteByte(W25X_WriteStatusReg);   //发送写取状态寄存器命令    
	SPIx_ReadWriteByte(sr);               //写入一个字节  
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=1;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 1;
}   
//SPI_FLASH写使能	
//将WEL置位   
void SPI_FLASH_Write_Enable(FlashInfo_t *pInf)   
{
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=0;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 0;
	else return;
    SPIx_ReadWriteByte(W25X_WriteEnable);      //发送写使能  
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=1;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 1;        	      
} 
//SPI_FLASH写禁止	
//将WEL清零  
void SPI_FLASH_Write_Disable(FlashInfo_t *pInf)   
{  
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=0;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 0;
	else return;  
    SPIx_ReadWriteByte(W25X_WriteDisable);     //发送写禁止指令    
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=1;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 1;      	      
} 			    
//读取芯片ID W25X16的ID:0XEF14
u16 SPI_Flash_ReadID(FlashInfo_t *pInf)
{
	u16 Temp = 0;	  
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=0;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 0;
	else return 0; 			    
	SPIx_ReadWriteByte(0x90);//发送读取ID命令	    
	SPIx_ReadWriteByte(0x00); 	    
	SPIx_ReadWriteByte(0x00); 	    
	SPIx_ReadWriteByte(0x00); 	 			   
	Temp|=SPIx_ReadWriteByte(0xFF)<<8;  
	Temp|=SPIx_ReadWriteByte(0xFF);	 
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=1;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 1; 			    
	return Temp;
}   		    
//读取SPI FLASH  
//在指定地址开始读取指定长度的数据
//pBuffer:数据存储区
//ReadAddr:开始读取的地址(24bit)
//NumByteToRead:要读取的字节数(最大65535)
void SPI_Flash_Read(FlashInfo_t *pInf,u8* pBuffer,u32 ReadAddr,u16 NumByteToRead)   
{ 
 	u16 i;    												    
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=0;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 0;
	else return;  
    SPIx_ReadWriteByte(W25X_ReadData);         //发送读取命令   
    SPIx_ReadWriteByte((u8)((ReadAddr)>>16));  //发送24bit地址    
    SPIx_ReadWriteByte((u8)((ReadAddr)>>8));   
    SPIx_ReadWriteByte((u8)ReadAddr);   
    for(i=0;i<NumByteToRead;i++)
	{ 
        pBuffer[i]=SPIx_ReadWriteByte(0XFF);   //循环读数  
    }
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=1;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 1;     	      
}  
//SPI在一页(0~65535)内写入少于256个字节的数据
//在指定地址开始写入最大256字节的数据
//pBuffer:数据存储区
//WriteAddr:开始写入的地址(24bit)
//NumByteToWrite:要写入的字节数(最大256),该数不应该超过该页的剩余字节数!!!	 
void SPI_Flash_Write_Page(FlashInfo_t *pInf,u8* pBuffer,u32 WriteAddr,u16 NumByteToWrite)
{
 	u16 i;  
    SPI_FLASH_Write_Enable(pInf);                  //SET WEL 
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=0;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 0;
	else return;  
    SPIx_ReadWriteByte(W25X_PageProgram);      //发送写页命令   
    SPIx_ReadWriteByte((u8)((WriteAddr)>>16)); //发送24bit地址    
    SPIx_ReadWriteByte((u8)((WriteAddr)>>8));   
    SPIx_ReadWriteByte((u8)WriteAddr);   
    for(i=0;i<NumByteToWrite;i++)SPIx_ReadWriteByte(pBuffer[i]);//循环写数  
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=1;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 1; 
	SPI_Flash_Wait_Busy(pInf);					   //等待写入结束
} 
//无检验写SPI FLASH 
//必须确保所写的地址范围内的数据全部为0XFF,否则在非0XFF处写入的数据将失败!
//具有自动换页功能 
//在指定地址开始写入指定长度的数据,但是要确保地址不越界!
//pBuffer:数据存储区
//WriteAddr:开始写入的地址(24bit)
//NumByteToWrite:要写入的字节数(最大65535)
//CHECK OK
void SPI_Flash_Write_NoCheck(FlashInfo_t *pInf,u8* pBuffer,u32 WriteAddr,u16 NumByteToWrite)   
{ 			 		 
	u16 pageremain;	   
	pageremain=256-WriteAddr%256; //单页剩余的字节数		 	    
	if(NumByteToWrite<=pageremain)pageremain=NumByteToWrite;//不大于256个字节
	while(1)
	{	   
		SPI_Flash_Write_Page(pInf,pBuffer,WriteAddr,pageremain);
		if(NumByteToWrite==pageremain)break;//写入结束了
	 	else //NumByteToWrite>pageremain
		{
			pBuffer+=pageremain;
			WriteAddr+=pageremain;	

			NumByteToWrite-=pageremain;			  //减去已经写入了的字节数
			if(NumByteToWrite>256)pageremain=256; //一次可以写入256个字节
			else pageremain=NumByteToWrite; 	  //不够256个字节了
		}
	};	    
} 
//写SPI FLASH  
//在指定地址开始写入指定长度的数据
//该函数带擦除操作!
//pBuffer:数据存储区
//WriteAddr:开始写入的地址(24bit)
//NumByteToWrite:要写入的字节数(最大65535)  		   
u8 SPI_FLASH_BUF[4096];
void SPI_Flash_Write(FlashInfo_t *pInf,u8* pBuffer,u32 WriteAddr,u16 NumByteToWrite)   
{ 
	u32 secpos;
	u16 secoff;
	u16 secremain;	   
 	u16 i;    

	secpos = WriteAddr/4096;//扇区地址 0~511 for w25x32
	secoff = WriteAddr%4096;//在扇区内的偏移
	secremain = 4096-secoff;//扇区剩余空间大小   

	if(NumByteToWrite <= secremain) 
		secremain = NumByteToWrite;//不大于4096个字节
	while(1) 
	{	
		SPI_Flash_Read (pInf,SPI_FLASH_BUF,secpos*4096,4096);//读出整个扇区的内容
		for(i=0; i<secremain; i++)//校验数据
		{
			if(SPI_FLASH_BUF[secoff+i] != 0XFF) 
				break;//需要擦除  	  
		}
		if(i<secremain)//需要擦除
		{
			SPI_Flash_Erase_Sector (pInf,secpos);//擦除这个扇区
			for( i=0; i<secremain; i++)	   //复制
			{
				SPI_FLASH_BUF[i+secoff] = pBuffer[i];	  
			}
			SPI_Flash_Write_NoCheck(pInf,SPI_FLASH_BUF,secpos*4096,4096);//写入整个扇区  

		}
		else
			SPI_Flash_Write_NoCheck(pInf,pBuffer,WriteAddr,secremain);//写已经擦除了的,直接写入扇区剩余区间. 				   
		if(NumByteToWrite == secremain)
			break;//写入结束了
		else//写入未结束
		{
			secpos++;//扇区地址增1
			secoff=0;//偏移位置为0 	 

		   	pBuffer+=secremain;  //指针偏移
			WriteAddr+=secremain;//写地址偏移	   
		   	NumByteToWrite-=secremain;				//字节数递减
			if(NumByteToWrite>4096)secremain=4096;	//下一个扇区还是写不完
			else secremain=NumByteToWrite;			//下一个扇区可以写完了
		}	 
	};	 	 
}
//擦除整个芯片
//整片擦除时间:
//W25X16:25s 
//w25x32:40s 
//W25X64:40s 
//等待时间超长...
void SPI_Flash_Erase_Chip(FlashInfo_t *pInf)   
{                                             
    SPI_FLASH_Write_Enable(pInf);                  //SET WEL 
    SPI_Flash_Wait_Busy(pInf);   
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=0;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 0;
	else return; 
    SPIx_ReadWriteByte(W25X_ChipErase);        //发送片擦除命令  
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=1;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 1;    	      
	SPI_Flash_Wait_Busy(pInf);   				   //等待芯片擦除结束
}   
//擦除一个扇区
//Dst_Addr:扇区地址 0~511 for w25x16
//擦除一个山区的最少时间:150ms
void SPI_Flash_Erase_Sector(FlashInfo_t *pInf,u32 Dst_Addr)   
{   
	Dst_Addr*=4096;
    SPI_FLASH_Write_Enable(pInf);                  //SET WEL 	 
    SPI_Flash_Wait_Busy(pInf);   
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=0;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 0;
	else return;  
    SPIx_ReadWriteByte(W25X_SectorErase);      //发送扇区擦除指令 
    SPIx_ReadWriteByte((u8)((Dst_Addr)>>16));  //发送24bit地址    
    SPIx_ReadWriteByte((u8)((Dst_Addr)>>8));   
    SPIx_ReadWriteByte((u8)Dst_Addr);  
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=1;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 1;     	      
    SPI_Flash_Wait_Busy(pInf);   				   //等待擦除完成
}  
//等待空闲
void SPI_Flash_Wait_Busy(FlashInfo_t *pInf)   
{   
	while ((SPI_Flash_ReadSR(pInf)&0x01)==0x01);   // 等待BUSY位清空
}  
//进入掉电模式
void SPI_Flash_PowerDown(FlashInfo_t *pInf)   
{ 
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=0;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 0;
	else return;  
    SPIx_ReadWriteByte(W25X_PowerDown);        //发送掉电命令  
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=1;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 1; 	      
    delayms(1);                               //等待TPD  
}   
//唤醒
void SPI_Flash_WAKEUP(FlashInfo_t *pInf)   
{  
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=0;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 0;
	else return;  
    SPIx_ReadWriteByte(W25X_ReleasePowerDown);   //  send W25X_PowerDown command 0xAB    
	if (MAIN_SPI_FLASH == pInf->channel)
		SPI_FLASH_CS=1;  
	else if(SUBORDINATION_SPI_FLASH == pInf->channel)
		SUBORDINATION_SPI_FLASH_CS = 1; 	      
    delayms(1);                               //等待TRES1
}   




















